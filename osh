#!/bin/bash
#
# > osh <
#
# Helpers for the OpenStack API. Because who can remember all those flags?
# james@da.ydrea.ms

vrs='v0.2'
lastchange='2/8/15'

echo -e "\n--> osh $vrs $lastchange <--"

OLD_PS3=$PS3

#
### MAKE SURE OUR ENVIRONMENT VARIABLES ARE SET
#

if [ -z "$OS_AUTH_URL" ]; then
  echo -e "\n--> $(tput setaf 1)Uh-oh.$(tput sgr0) osh can't run until you've signed in with OpenStack and set your environment variables.
  \n(In some systems, you can do this by running $(tput setaf 1)\`source <path-to-.openrc.sh>\`$(tput sgr0)).\n"
  exit 1
fi

### END MAKE SURE OUR ENVIRONMENT VARIABLES ARE SET


#
### BOOT AN INSTANCE ###
#

# fetch and parse available images
function getAvailableImages () {
  nova image-list > imagelist.txt

  icount=0

  # the image ID is a 36-character string with dashes at indices 8, 13, 18 and 23
  for id in $(sed -nE 's/.*([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}).*/\1/p' < imagelist.txt); do
    imageids[$icount]="$id"
    imagestrings[$icount]=$(sed -nE "/$id/ s/.*$id \| ([a-zA-Z0-9\.\-]+) +\|.*$/\1/p" < imagelist.txt)
    icount=$(($icount+1))
  done
  unset icount

  rm -P imagelist.txt
}

# fetch and parse available flavors
function getAvailableFlavors () {
  nova flavor-list > flavorlist.txt

  fcount=0

  # the flavor ID is a 3-digit integer
  for id in $(sed -nE 's/\| ([0-9]{3}) \|.*/\1/p' < flavorlist.txt); do
    flavorids[$fcount]="$id"
    flavornames[$fcount]=$(sed -nE "/$id/ s/.*$id \| ([a-z]+) +\|.*$/\1/p" < flavorlist.txt)
    fcount=$(($fcount+1))
  done
  unset fcount

  rm -P flavorlist.txt
}

# boot function helpers
function getKey () {
  while [ -z "$keyname" ]; do
    echo -e ""
    read -p "--> Which key should this volume use? " keyname
  done
}

function makeBlockDevice () {
  echo -e "\n--> Create the block device from a/an ..."
  PS3=$'\n'"--> Device source: "
  select devicesource in "Volume" "Snapshot" "Image" "Blank"; do
    case $devicesource in
      Volume ) devicesource="volume"; break;;
      Snapshot ) devicesource="snapshot"; break;;
      Image ) devicesource="image"; break;;
      Blank ) devicesource="blank"; break;;
    esac
  done

  if [ $devicesource == "image" ]; then
    icount=0
    ilength=${#imagestrings[*]}
    echo -e "\n--> Choose from your available images:"

    while [ $icount -lt $ilength ]; do
      echo -e "$(echo $(($icount+1)))) ${imagestrings[$icount]}"
      icount=$(($icount+1))
    done

    echo -e ""
    read -p "--> Device image: " imagechoice

    while [[ ! "$imagechoice" =~ ^[1-9]+$ || "$imagechoice" -gt $ilength ]]; do
      read -p "--> Enter an integer representing one of the $ilength choices above: " imagechoice
    done

    sourceid=${imageids[$(($imagechoice-1))]}
    imagestring=${imagestrings[$(($imagechoice-1))]}
    unset icount
    unset ilength
  fi
}

function setFlavor () {
  fcount=0
  flength=${#flavornames[*]}
  echo -e "\n--> Choose from your available flavors:"

  while [ $fcount -lt $flength ]; do
    echo -e "$(echo $(($fcount+1)))) ${flavornames[$fcount]}"
    fcount=$(($fcount+1))
  done

  echo -e ""
  read -p "--> Device flavor: " flavorchoice

  while [[ ! "$flavorchoice" =~ ^[1-9]+$ || "$flavorchoice" -gt $flength ]]; do
    read -p "--> Enter an integer representing one of the $flength choices above: " flavorchoice
  done

  flavorid=${flavorids[$(($flavorchoice-1))]}
  flavorname=${flavornames[$(($flavorchoice-1))]}
  unset fcount
}

function getDeviceType () {
  echo -e "\n--> Which type of device will it be?"
  PS3=$'\n'"--> Device type: "
  select devicetype in "Volume" "Local"; do
    case $devicetype in
      Volume ) devicetype="volume"; break;;
      Local ) devicetype="local"; break;;
    esac
  done
}

function setStorageSize () {
  echo -e ""
  read -p "--> How many gigabytes of storage? Default is 80: " storagesize
  if [ -z "$storagesize" ]; then
    storagesize="80"
  fi
  while [[ ! "$storagesize" =~ ^[0-9]+$ ]]; do
    read -p "--> The storage size should be an integer. Default is 80 gigabytes: " storagesize
  done
}

function setBootIndex () {
  while [ -z "$bootindex" ]; do
    echo -e ""
    read -p "--> Boot index? (Enter 0 to boot from this volume.): " bootindex
  done
  while [[ ! "$bootindex" =~ ^[0-9]+$ ]]; do
    read -p "--> The boot index should be an integer. (Enter 0 to boot from this volume.): " bootindex
  done
}

function setPreserve () {
  echo -e "\n--> Preserve the volume when the instance is shut down?"
  PS3=$'\n'"--> Preserve on shutdown? "
  select preserve in "Yes" "No"; do
    case $preserve in
      Yes ) preserve="preserve"; break;;
      No ) preserve="remove"; break;;
    esac
  done
}

function setServerName () {
  while [ -z "$servername" ]; do
    echo -e ""
    read -p "--> What will you name this server? " servername
  done
}



# boot functions
function boot_ephemeral () {
  getKey
  setFlavor
  makeBlockDevice
  setServerName
  nova boot --poll --flavor "$flavorname" --image "$imagestring" --key-name "$keyname" "$servername"
}

function boot_persistent () {
  getKey
  setFlavor
  makeBlockDevice
  getDeviceType
  setStorageSize
  setPreserve
  setBootIndex
  setServerName
  nova boot --poll --flavor "$flavorname" --key-name "$keyname" --block-device source="$devicesource",id="$sourceid",dest="$devicetype",size="$storagesize",shutdown="$preserve",bootindex="$bootindex" "$servername"
}


if [ "$1" == "boot" ]; then
  getAvailableImages
  getAvailableFlavors
  # collect persistence type
  if [ "$2" == "ephemeral" ]; then
    boottype="ephemeral"
  elif [ "$2" == "persistent" ]; then
    boottype="persistent"
  else
    echo -e "\n--> Will this be an ephemeral or a persistent instance? "
    PS3=$'\n'"--> Instance type: "
    select boottype in "Ephemeral" "Persistent"; do
      case $boottype in
        Ephemeral ) boottype="ephemeral"; break;;
        Persistent ) boottype="persistent"; break;;
      esac
    done
  fi # end collecting persistence type

  if [ "$boottype" == "ephemeral" ]; then
    boot_ephemeral
  fi

  if [ "$boottype" == "persistent" ]; then
    boot_persistent
  fi
  exit 0
fi # end main

### END BOOT AN INSTANCE ###


#
### DELETE AN INSTANCE ###
#

# fetch and parse available instances
function getRunningInstances () {
  nova list > instancelist.txt

  instcount=0

  # the instance ID is a 36-character string with dashes at indices 8, 13, 18 and 23
  for id in $(sed -nE 's/.*([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}).*/\1/p' < instancelist.txt); do
    instanceids[$instcount]="$id"
    instancenames[$instcount]=$(sed -nE "/$id/ s/.*$id \| ([a-zA-Z0-9_\.\-]+) +\|.*$/\1/p" < instancelist.txt)
  done
  rm -P instancelist.txt

  if [ -z "${instanceids[0]}" ]; then
    echo -e "\n--> There are $(tput setaf 1)no running volumes$(tput sgr0). Nothing to delete."
    exit 1
  else
    instcount=$(($instcount+1))
  fi
  
  unset instcount
}

function detectInstance () {
  instcount=0
  instlength=${#instancenames[*]}
  echo -e "\n--> Choose an instance to delete:"

  while [ $instcount -lt $instlength ]; do
    echo -e "$(echo $(($instcount+1)))) ${instancenames[$instcount]}"
    instcount=$(($instcount+1))
  done

  echo -e ""
  read -p "--> Delete instance: " instancechoice

  while [[ ! "$instancechoice" =~ ^[1-9]+$ || "$instancechoice" -gt $instlength ]]; do
    read -p "--> Enter an integer representing one of the $instlength choices above: " instancechoice
  done

  unset instcount
  unset instlength

  instanceid=${instanceids[$(($instancechoice-1))]}
  instancename=${instancenames[$(($instancechoice-1))]}
}

function deleteInstance () {
  PS3=$'\n'"--> Are you sure you want to delete $instancename? "
  select delete in "Yes" "No"; do
    case $delete in
      Yes ) delete="delete"; break;;
      No ) delete="preserve"; break;;
    esac
  done

  if [ "$delete" == "delete" ]; then
    # nova delete $instancename
    echo -e "\n--> $(tput setaf 4)OK.$(tput sgr0) $instancename has been deleted."
  else
    echo -e "\n--> $(tput setaf 4)OK.$(tput sgr0) I won't delete $instancename."
  fi
  exit 0
}

if [ "$1" == "delete" ]; then
  getRunningInstances
  detectInstance
  deleteInstance
fi

### END DELETE AN INSTANCE ###

PS3=$OLD_PS3
